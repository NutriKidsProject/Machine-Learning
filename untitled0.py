# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T6VSOl6EaMHRls2CvqPzxW2CzwhHPOen
"""

import numpy as np
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from tensorflow.keras.models import load_model
from google.colab import drive

# Load dataset scaler dan model yang telah dilatih
# Pastikan path sesuai dengan file model dan scaler yang disimpan
model_nutrition_path = "/content/drive/My Drive/Colab Notebooks/Ekspor Models/model_nutrition_status.h5"
recommendation_model_path = "/content/drive/My Drive/Colab Notebooks/Ekspor Models/recommendation_model.h5"
scaler_path = "/content/drive/My Drive/Colab Notebooks/Ekspor Models/scalers.json"

# Load model
model_nutrition = load_model(model_nutrition_path)
recommendation_model = load_model(recommendation_model_path)

# Load scaler
import json
with open(scaler_path, "r") as f:
    scalers = json.load(f)

scaler_X = MinMaxScaler()
scaler_X.min_, scaler_X.scale_, scaler_X.data_min_, scaler_X.data_max_ = (
    np.array(scalers['scaler_X']['min_']),
    np.array(scalers['scaler_X']['scale_']),
    np.array(scalers['scaler_X']['data_min_']),
    np.array(scalers['scaler_X']['data_max_']),
)

# Label encoder
label_encoder = LabelEncoder()
label_encoder.classes_ = np.array(['Gizi Baik', 'Gizi Kurang', 'Gizi Lebih'])

# Input fitur makanan
food_features = [
    'caloric_value', 'fat', 'saturated_fats', 'monounsaturated_fats',
    'polyunsaturated_fats', 'carbohydrates', 'sugars', 'protein',
    'dietary_fiber', 'cholesterol', 'sodium', 'water', 'vitamin_a',
    'vitamin_b1', 'vitamin_b11', 'vitamin_b12', 'vitamin_b2', 'vitamin_b3',
    'vitamin_b5', 'vitamin_b6', 'vitamin_c', 'vitamin_d', 'vitamin_e',
    'vitamin_k', 'calcium', 'copper', 'iron', 'magnesium', 'manganese',
    'phosphorus', 'potassium', 'selenium', 'zinc', 'nutrition_density'
]

# Function untuk prediksi status gizi anak
def predict_nutrition_status(usia, tinggi, berat):
    data = np.array([[usia, tinggi, berat]])
    scaled_data = scaler_X.transform(data).reshape(1, 1, 3)
    prediction = model_nutrition.predict(scaled_data)
    predicted_class = np.argmax(prediction)
    return label_encoder.inverse_transform([predicted_class])[0]

# Function untuk rekomendasi makanan
def recommend_food(preference_vector, food_vector):
    prediction = recommendation_model.predict([preference_vector, food_vector])
    return prediction.flatten()

# Main Program
def main():
    print("=== Aplikasi Analisis Gizi Anak ===")

    # Input data anak
    usia = float(input("Masukkan usia anak (dalam tahun): "))
    tinggi = float(input("Masukkan tinggi anak (dalam cm): "))
    berat = float(input("Masukkan berat badan anak (dalam kg): "))

    # Prediksi status gizi anak
    status_gizi = predict_nutrition_status(usia, tinggi, berat)
    print(f"\nHasil Prediksi Status Gizi Anak: {status_gizi}")

    # Input preferensi makanan pengguna
    print("\nMasukkan preferensi makanan dalam bentuk angka antara 0 dan 1.")
    preference_vector = []
    for feature in food_features:
        pref = float(input(f"{feature}: "))
        preference_vector.append(pref)

    # Normalisasi preferensi pengguna
    preference_vector = np.array(preference_vector).reshape(1, -1)

    # Normalisasi fitur makanan
    food_data_normalized = scaler_X.transform(preference_vector)

    # Prediksi rekomendasi makanan
    food_recommendation = recommend_food(preference_vector, food_data_normalized)
    print(f"\nRekomendasi Makanan: Skor {food_recommendation[0]:.2f}")

if __name__ == "__main__":
    main()